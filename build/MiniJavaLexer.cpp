// MiniJavaLexer.cpp generated by reflex 5.1.1 from /mnt/c/Users/josue/OneDrive/Documentos/VCode Proyectos/PracticasCompiladores2/MiniJavaLexer.l

#define REFLEX_VERSION "5.1.1"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_header_file         "MiniJavaLexer.hpp"
#define REFLEX_OPTION_lex                 nextToken
#define REFLEX_OPTION_lexer               MiniJavaLexer
#define REFLEX_OPTION_outfile             "MiniJavaLexer.cpp"
#define REFLEX_OPTION_params              Expr::Parser::value_type *yylval

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 13 "/mnt/c/Users/josue/OneDrive/Documentos/VCode Proyectos/PracticasCompiladores2/MiniJavaLexer.l"


    #include "MiniJavaParser.hpp"


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS INCLUDE                                                       //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include "MiniJavaLexer.hpp"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %{ user code %}                                                //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 7 "/mnt/c/Users/josue/OneDrive/Documentos/VCode Proyectos/PracticasCompiladores2/MiniJavaLexer.l"

#include <iostream>
#include "MiniJavaLexer.hpp"
#include "MiniJavaParser.hpp"


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

int MiniJavaLexer::nextToken(Expr::Parser::value_type *yylval)
{
  static const char *REGEX_INITIAL = "(?m)([\\x09\\x0a\\x0d\\x20]+)|((?:\\Q+\\E))|((?:\\Q-\\E))|((?:\\Q*\\E))|((?:\\Q/\\E))|((?:\\Q(\\E))|((?:\\Q)\\E))|((?:\\Q;\\E))|([A-Z_a-z][0-9A-Z_a-z]*)|([0-9]+)|(.)";
  static const reflex::Pattern PATTERN_INITIAL(REGEX_INITIAL);
  static const char *REGEX_COMMENT = "(?m)";
  static const reflex::Pattern PATTERN_COMMENT(REGEX_COMMENT);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
  }
  while (true)
  {
    switch (start())
    {
      case INITIAL:
        matcher().pattern(PATTERN_INITIAL);
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              return int();
            }
            else
            {
              out().put(matcher().input());
            }
            break;
          case 1: // rule /mnt/c/Users/josue/OneDrive/Documentos/VCode Proyectos/PracticasCompiladores2/MiniJavaLexer.l:25: [ \t\r\n]+ :
#line 25 "/mnt/c/Users/josue/OneDrive/Documentos/VCode Proyectos/PracticasCompiladores2/MiniJavaLexer.l"
{ /* Ignorar espacios en blanco */ }

            break;
          case 2: // rule /mnt/c/Users/josue/OneDrive/Documentos/VCode Proyectos/PracticasCompiladores2/MiniJavaLexer.l:27: "+" :
#line 27 "/mnt/c/Users/josue/OneDrive/Documentos/VCode Proyectos/PracticasCompiladores2/MiniJavaLexer.l"
{ return Token::OP_ADD; }
            break;
          case 3: // rule /mnt/c/Users/josue/OneDrive/Documentos/VCode Proyectos/PracticasCompiladores2/MiniJavaLexer.l:28: "-" :
#line 28 "/mnt/c/Users/josue/OneDrive/Documentos/VCode Proyectos/PracticasCompiladores2/MiniJavaLexer.l"
{ return Token::OP_SUB; }
            break;
          case 4: // rule /mnt/c/Users/josue/OneDrive/Documentos/VCode Proyectos/PracticasCompiladores2/MiniJavaLexer.l:29: "*" :
#line 29 "/mnt/c/Users/josue/OneDrive/Documentos/VCode Proyectos/PracticasCompiladores2/MiniJavaLexer.l"
{ return Token::OP_MUL; }
            break;
          case 5: // rule /mnt/c/Users/josue/OneDrive/Documentos/VCode Proyectos/PracticasCompiladores2/MiniJavaLexer.l:30: "/" :
#line 30 "/mnt/c/Users/josue/OneDrive/Documentos/VCode Proyectos/PracticasCompiladores2/MiniJavaLexer.l"
{ return Token::OP_DIV; }
            break;
          case 6: // rule /mnt/c/Users/josue/OneDrive/Documentos/VCode Proyectos/PracticasCompiladores2/MiniJavaLexer.l:31: "(" :
#line 31 "/mnt/c/Users/josue/OneDrive/Documentos/VCode Proyectos/PracticasCompiladores2/MiniJavaLexer.l"
{ return Token::OPEN_PAR; }
            break;
          case 7: // rule /mnt/c/Users/josue/OneDrive/Documentos/VCode Proyectos/PracticasCompiladores2/MiniJavaLexer.l:32: ")" :
#line 32 "/mnt/c/Users/josue/OneDrive/Documentos/VCode Proyectos/PracticasCompiladores2/MiniJavaLexer.l"
{ return Token::CLOSE_PAR; }
            break;
          case 8: // rule /mnt/c/Users/josue/OneDrive/Documentos/VCode Proyectos/PracticasCompiladores2/MiniJavaLexer.l:33: ";" :
#line 33 "/mnt/c/Users/josue/OneDrive/Documentos/VCode Proyectos/PracticasCompiladores2/MiniJavaLexer.l"
{ return Token::SEMICOLON; }

            break;
          case 9: // rule /mnt/c/Users/josue/OneDrive/Documentos/VCode Proyectos/PracticasCompiladores2/MiniJavaLexer.l:35: [a-zA-Z_][a-zA-Z0-9_]* :
#line 35 "/mnt/c/Users/josue/OneDrive/Documentos/VCode Proyectos/PracticasCompiladores2/MiniJavaLexer.l"
{
    yylval->emplace<std::string>(text());
    std::cout << text() << std::endl;
    return Token::IDENTIFIER;
}

            break;
          case 10: // rule /mnt/c/Users/josue/OneDrive/Documentos/VCode Proyectos/PracticasCompiladores2/MiniJavaLexer.l:41: [0-9]+ :
#line 41 "/mnt/c/Users/josue/OneDrive/Documentos/VCode Proyectos/PracticasCompiladores2/MiniJavaLexer.l"
{ return Token::INT_CONST; }

            break;
          case 11: // rule /mnt/c/Users/josue/OneDrive/Documentos/VCode Proyectos/PracticasCompiladores2/MiniJavaLexer.l:43: . :
#line 43 "/mnt/c/Users/josue/OneDrive/Documentos/VCode Proyectos/PracticasCompiladores2/MiniJavaLexer.l"
{ return Token::ERROR; }

            break;
        }
        break;
      case COMMENT:
        matcher().pattern(PATTERN_COMMENT);
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              return int();
            }
            else
            {
              out().put(matcher().input());
            }
            break;
        }
        break;
      default:
        start(0);
    }
  }
}
